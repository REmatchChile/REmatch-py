# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rematchpy
else:
    import _rematchpy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rematchpy.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rematchpy.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rematchpy.delete_SwigPyIterator
    value = _swig_new_instance_method(_rematchpy.SwigPyIterator_value)
    incr = _swig_new_instance_method(_rematchpy.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_rematchpy.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_rematchpy.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_rematchpy.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_rematchpy.SwigPyIterator_copy)
    next = _swig_new_instance_method(_rematchpy.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_rematchpy.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_rematchpy.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_rematchpy.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rematchpy:
_rematchpy.SwigPyIterator_swigregister(SwigPyIterator)

class PairSize(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rematchpy.PairSize_swiginit(self, _rematchpy.new_PairSize(*args))
    first = property(_rematchpy.PairSize_first_get, _rematchpy.PairSize_first_set)
    second = property(_rematchpy.PairSize_second_get, _rematchpy.PairSize_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _rematchpy.delete_PairSize

# Register PairSize in _rematchpy:
_rematchpy.PairSize_swigregister(PairSize)

class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_rematchpy.StrVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_rematchpy.StrVector___nonzero__)
    __bool__ = _swig_new_instance_method(_rematchpy.StrVector___bool__)
    __len__ = _swig_new_instance_method(_rematchpy.StrVector___len__)
    __getslice__ = _swig_new_instance_method(_rematchpy.StrVector___getslice__)
    __setslice__ = _swig_new_instance_method(_rematchpy.StrVector___setslice__)
    __delslice__ = _swig_new_instance_method(_rematchpy.StrVector___delslice__)
    __delitem__ = _swig_new_instance_method(_rematchpy.StrVector___delitem__)
    __getitem__ = _swig_new_instance_method(_rematchpy.StrVector___getitem__)
    __setitem__ = _swig_new_instance_method(_rematchpy.StrVector___setitem__)
    pop = _swig_new_instance_method(_rematchpy.StrVector_pop)
    append = _swig_new_instance_method(_rematchpy.StrVector_append)
    empty = _swig_new_instance_method(_rematchpy.StrVector_empty)
    size = _swig_new_instance_method(_rematchpy.StrVector_size)
    swap = _swig_new_instance_method(_rematchpy.StrVector_swap)
    begin = _swig_new_instance_method(_rematchpy.StrVector_begin)
    end = _swig_new_instance_method(_rematchpy.StrVector_end)
    rbegin = _swig_new_instance_method(_rematchpy.StrVector_rbegin)
    rend = _swig_new_instance_method(_rematchpy.StrVector_rend)
    clear = _swig_new_instance_method(_rematchpy.StrVector_clear)
    get_allocator = _swig_new_instance_method(_rematchpy.StrVector_get_allocator)
    pop_back = _swig_new_instance_method(_rematchpy.StrVector_pop_back)
    erase = _swig_new_instance_method(_rematchpy.StrVector_erase)

    def __init__(self, *args):
        _rematchpy.StrVector_swiginit(self, _rematchpy.new_StrVector(*args))
    push_back = _swig_new_instance_method(_rematchpy.StrVector_push_back)
    front = _swig_new_instance_method(_rematchpy.StrVector_front)
    back = _swig_new_instance_method(_rematchpy.StrVector_back)
    assign = _swig_new_instance_method(_rematchpy.StrVector_assign)
    resize = _swig_new_instance_method(_rematchpy.StrVector_resize)
    insert = _swig_new_instance_method(_rematchpy.StrVector_insert)
    reserve = _swig_new_instance_method(_rematchpy.StrVector_reserve)
    capacity = _swig_new_instance_method(_rematchpy.StrVector_capacity)
    __swig_destroy__ = _rematchpy.delete_StrVector

# Register StrVector in _rematchpy:
_rematchpy.StrVector_swigregister(StrVector)

class MatchUniquePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rematchpy.MatchUniquePtr_swiginit(self, _rematchpy.new_MatchUniquePtr(*args))
    __deref__ = _swig_new_instance_method(_rematchpy.MatchUniquePtr___deref__)
    release = _swig_new_instance_method(_rematchpy.MatchUniquePtr_release)
    reset = _swig_new_instance_method(_rematchpy.MatchUniquePtr_reset)
    swap = _swig_new_instance_method(_rematchpy.MatchUniquePtr_swap)
    get = _swig_new_instance_method(_rematchpy.MatchUniquePtr_get)

    def __nonzero__(self):
        return _rematchpy.MatchUniquePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _rematchpy.delete_MatchUniquePtr
    start = _swig_new_instance_method(_rematchpy.MatchUniquePtr_start)
    end = _swig_new_instance_method(_rematchpy.MatchUniquePtr_end)
    span = _swig_new_instance_method(_rematchpy.MatchUniquePtr_span)
    variables = _swig_new_instance_method(_rematchpy.MatchUniquePtr_variables)

# Register MatchUniquePtr in _rematchpy:
_rematchpy.MatchUniquePtr_swigregister(MatchUniquePtr)

kUnanchored = _rematchpy.kUnanchored
kSingleAnchor = _rematchpy.kSingleAnchor
kBothAnchors = _rematchpy.kBothAnchors
class RegExOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rematchpy.RegExOptions_swiginit(self, _rematchpy.new_RegExOptions())
    multi_line = _swig_new_instance_method(_rematchpy.RegExOptions_multi_line)
    set_multi_line = _swig_new_instance_method(_rematchpy.RegExOptions_set_multi_line)
    line_by_line = _swig_new_instance_method(_rematchpy.RegExOptions_line_by_line)
    set_line_by_line = _swig_new_instance_method(_rematchpy.RegExOptions_set_line_by_line)
    dot_nl = _swig_new_instance_method(_rematchpy.RegExOptions_dot_nl)
    set_dot_nl = _swig_new_instance_method(_rematchpy.RegExOptions_set_dot_nl)
    early_output = _swig_new_instance_method(_rematchpy.RegExOptions_early_output)
    set_early_output = _swig_new_instance_method(_rematchpy.RegExOptions_set_early_output)
    save_anchors = _swig_new_instance_method(_rematchpy.RegExOptions_save_anchors)
    set_save_anchors = _swig_new_instance_method(_rematchpy.RegExOptions_set_save_anchors)
    __swig_destroy__ = _rematchpy.delete_RegExOptions

# Register RegExOptions in _rematchpy:
_rematchpy.RegExOptions_swigregister(RegExOptions)

class Match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rematchpy.Match_swiginit(self, _rematchpy.new_Match())
    start = _swig_new_instance_method(_rematchpy.Match_start)
    end = _swig_new_instance_method(_rematchpy.Match_end)
    span = _swig_new_instance_method(_rematchpy.Match_span)
    variables = _swig_new_instance_method(_rematchpy.Match_variables)
    __swig_destroy__ = _rematchpy.delete_Match

# Register Match in _rematchpy:
_rematchpy.Match_swigregister(Match)

class EvaluatorIter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    next = _swig_new_instance_method(_rematchpy.EvaluatorIter_next)
    hasNext = _swig_new_instance_method(_rematchpy.EvaluatorIter_hasNext)

    def __init__(self):
        _rematchpy.EvaluatorIter_swiginit(self, _rematchpy.new_EvaluatorIter())
    __swig_destroy__ = _rematchpy.delete_EvaluatorIter

# Register EvaluatorIter in _rematchpy:
_rematchpy.EvaluatorIter_swigregister(EvaluatorIter)

class RegEx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rematchpy.RegEx_swiginit(self, _rematchpy.new_RegEx(*args))
    __swig_destroy__ = _rematchpy.delete_RegEx
    findIter = _swig_new_instance_method(_rematchpy.RegEx_findIter)
    varScheme = _swig_new_instance_method(_rematchpy.RegEx_varScheme)

# Register RegEx in _rematchpy:
_rematchpy.RegEx_swigregister(RegEx)



